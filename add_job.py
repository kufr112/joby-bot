from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime
from keyboards import menu_keyboard
from supabase_client import supabase


router = Router()

# üíº –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddJob(StatesGroup):
    title = State()
    description = State()
    price = State()

# üöÄ –°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏
@router.message(lambda m: "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É" in m.text.lower())
async def start_add_job(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = supabase.table("users").select("*").eq("id", user_id).execute()
    if not result.data:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        new_user = {
            "id": user_id,
            "roles": ["–∑–∞–∫–∞–∑—á–∏–∫"],
            "city": "–ù–µ —É–∫–∞–∑–∞–Ω",
            "contact": f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω",
            "created_at": datetime.utcnow().isoformat()
        }
        supabase.table("users").insert(new_user).execute()
    else:
        roles = result.data[0].get("roles", [])
        if "–∑–∞–∫–∞–∑—á–∏–∫" not in roles:
            roles.append("–∑–∞–∫–∞–∑—á–∏–∫")
            supabase.table("users").update({"roles": roles}).eq("id", user_id).execute()

    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–º–æ—â—å –Ω–∞ —Å–∫–ª–∞–¥–µ'):")
    await state.set_state(AddJob.title)

# üß© –°–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
@router.message(AddJob.title)
async def get_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("üìÑ –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏:")
    await state.set_state(AddJob.description)

# üìÑ –°–±–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(AddJob.description)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –æ–ø–ª–∞—Ç—É (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AddJob.price)

# üí∞ –°–±–æ—Ä —Ü–µ–Ω—ã –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
@router.message(AddJob.price)
async def get_price(message: Message, state: FSMContext):
    price_text = message.text.strip()

    if not price_text.isdigit():
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(price=price_text)
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase
    user_id = str(message.from_user.id)
    user_data = supabase.table("users").select("city,contact").eq("id", user_id).execute()
    user = user_data.data[0] if user_data.data else {}

    job = {
        "user_id": user_id,
        "title": data["title"],
        "description": data["description"],
        "price": data["price"],
        "city": user.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω"),
        "contact": user.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω"),
        "created_at": datetime.utcnow().isoformat()
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É –≤ Supabase
    supabase.table("jobs").insert(job).execute()

    await message.answer(
        f"‚úÖ <b>–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞!</b>\n\n"
        f"<b>{job['title']}</b>\n"
        f"{job['description']}\n"
        f"üí∞ {job['price']} —Ä—É–±.\n"
        f"üìç {job['city']}\n"
        f"üìû {job['contact']}",
        reply_markup=menu_keyboard
    )
    await state.clear()
