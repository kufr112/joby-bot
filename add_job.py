from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import json
import os
from datetime import datetime

from keyboards import menu_keyboard
from registration import load_users, save_user, update_stats, write_log  # –ø–æ–¥–∫–ª—é—á–∞–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

router = Router()

JOBS_FILE = "jobs.json"
LOG_FILE = "actions.log"

# üíº –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏
class AddJob(StatesGroup):
    title = State()
    description = State()
    price = State()

# üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫
def load_jobs():
    if os.path.exists(JOBS_FILE):
        with open(JOBS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return []

def save_job(job):
    jobs = load_jobs()
    jobs.append(job)
    with open(JOBS_FILE, "w", encoding="utf-8") as f:
        json.dump(jobs, f, ensure_ascii=False, indent=2)
    write_log(f"[JOB] –ù–æ–≤–∞—è –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç {job['user_id']} ‚Äî {job['title']} ({job['price']} —Ä—É–±.)")

# üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É"
@router.message(lambda m: "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É" in m.text.lower())
async def start_add_job(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    users = load_users()
    user = users.get(user_id)

    # üß† –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —Å —Ä–æ–ª—å—é "–∑–∞–∫–∞–∑—á–∏–∫"
    if not user:
        user = {
            "roles": ["–∑–∞–∫–∞–∑—á–∏–∫"],
            "city": "–ù–µ —É–∫–∞–∑–∞–Ω",
            "contact": f"@{message.from_user.username}" if message.from_user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
        }
        save_user(user_id, user)
        update_stats("–∑–∞–∫–∞–∑—á–∏–∫")
        write_log(f"[REG-AUTO] {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫ (—á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)")
    # üîÑ –ï—Å–ª–∏ –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç —Ä–æ–ª–∏ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å "–∑–∞–∫–∞–∑—á–∏–∫"
    elif "–∑–∞–∫–∞–∑—á–∏–∫" not in user.get("roles", []):
        user["roles"].append("–∑–∞–∫–∞–∑—á–∏–∫")
        save_user(user_id, user)
        update_stats("–∑–∞–∫–∞–∑—á–∏–∫")
        write_log(f"[REG-AUTO] {user_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –∑–∞–∫–∞–∑—á–∏–∫ (—á–µ—Ä–µ–∑ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ)")

    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–º–æ—â—å –Ω–∞ —Å–∫–ª–∞–¥–µ'):")
    await state.set_state(AddJob.title)

# üß© –°–±–æ—Ä –∑–∞–≥–æ–ª–æ–≤–∫–∞
@router.message(AddJob.title)
async def get_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await message.answer("üìÑ –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏:")
    await state.set_state(AddJob.description)

# üìÑ –°–±–æ—Ä –æ–ø–∏—Å–∞–Ω–∏—è
@router.message(AddJob.description)
async def get_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("üí∞ –£–∫–∞–∂–∏—Ç–µ –æ–ø–ª–∞—Ç—É (–≤ —Ä—É–±–ª—è—Ö):")
    await state.set_state(AddJob.price)

# üí∞ –°–±–æ—Ä —Ü–µ–Ω—ã –∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
@router.message(AddJob.price)
async def get_price(message: Message, state: FSMContext):
    price_text = message.text.strip()

    if not price_text.isdigit():
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    await state.update_data(price=price_text)
    data = await state.get_data()

    users = load_users()
    user = users.get(str(message.from_user.id), {})

    job = {
        "user_id": message.from_user.id,
        "title": data["title"],
        "description": data["description"],
        "price": data["price"],
        "city": user.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω"),
        "contact": user.get("contact", "–ù–µ —É–∫–∞–∑–∞–Ω"),
        "timestamp": datetime.now().isoformat()
    }

    save_job(job)

    await message.answer(
        f"‚úÖ <b>–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞!</b>\n\n"
        f"<b>{job['title']}</b>\n"
        f"{job['description']}\n"
        f"üí∞ {job['price']} —Ä—É–±.\n"
        f"üìç {job['city']}\n"
        f"üìû {job['contact']}",
        reply_markup=menu_keyboard
    )
    await state.clear()
