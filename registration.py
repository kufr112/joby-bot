from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
import json
import os
from datetime import datetime
from keyboards import menu_keyboard

router = Router()

USERS_FILE = "users.json"
STATS_FILE = "stats.json"
LOG_FILE = "actions.log"

def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def save_user(user_id, data):
    users = load_users()
    users[str(user_id)] = data
    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

def update_stats(new_role):
    stats = {"total": 0, "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": 0, "–∑–∞–∫–∞–∑—á–∏–∫": 0}
    if os.path.exists(STATS_FILE):
        with open(STATS_FILE, "r", encoding="utf-8") as f:
            try:
                stats = json.load(f)
            except json.JSONDecodeError:
                pass
    stats["total"] += 1
    if new_role in stats:
        stats[new_role] += 1
    with open(STATS_FILE, "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)

def write_log(text):
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] {text}\n")

class Registration(StatesGroup):
    role = State()
    city = State()
    contact = State()

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    write_log(f"[START] {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Joby ‚Äî –±–æ—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîç –•–æ—á—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É")],
                [KeyboardButton(text="‚ûï –•–æ—á—É —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(Registration.role)

@router.message(Registration.role)
async def get_role(message: Message, state: FSMContext):
    role = None
    if "–Ω–∞–π—Ç–∏" in message.text.lower():
        role = "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    elif "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å" in message.text.lower():
        role = "–∑–∞–∫–∞–∑—á–∏–∫"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.")
        return

    user_id = str(message.from_user.id)
    users = load_users()
    user = users.get(user_id)

    if user:
        roles = user.get("roles", [])
        if role not in roles:
            roles.append(role)
            user["roles"] = roles
            save_user(user_id, user)
            update_stats(role)
            write_log(f"[REG] {user_id} –¥–æ–±–∞–≤–∏–ª —Ä–æ–ª—å {role}")
            await message.answer(f"‚úÖ –†–æ–ª—å <b>{role}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.", reply_markup=menu_keyboard)
        else:
            await message.answer(f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å <b>{role}</b>.", reply_markup=menu_keyboard)
        await state.clear()
        return

    await state.update_data(roles=[role])
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(Registration.city)

@router.message(Registration.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    username = message.from_user.username
    if username:
        await state.update_data(contact=f"@{username}")
        data = await state.get_data()
        save_user(message.from_user.id, data)
        for r in data.get("roles", []):
            update_stats(r)
        write_log(f"[REG] {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Å —Ä–æ–ª—è–º–∏ {data['roles']}")
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.", reply_markup=menu_keyboard)
        await state.clear()
    else:
        await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username):")
        await state.set_state(Registration.contact)

@router.message(Registration.contact)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    save_user(message.from_user.id, data)
    for r in data.get("roles", []):
        update_stats(r)
    write_log(f"[REG] {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Å —Ä–æ–ª—è–º–∏ {data['roles']}")
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.", reply_markup=menu_keyboard)
    await state.clear()
