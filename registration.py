import logging
import os
from datetime import datetime

from aiogram import Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from supabase import create_client
from dotenv import load_dotenv

# === –õ–æ–≥–≥–µ—Ä ===
logger = logging.getLogger(__name__)

# === Supabase ===
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é ===
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É")],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")]
    ],
    resize_keyboard=True
)

router = Router()

# === FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class Registration(StatesGroup):
    role = State()
    city = State()
    contact = State()

# === Supabase-—Ñ—É–Ω–∫—Ü–∏–∏ ===
def save_user(user_id, data):
    existing = supabase.table("users").select("telegram_id").eq("telegram_id", user_id).execute()
    if existing.data:
        supabase.table("users").update({
            "roles": data["roles"],
            "city": data.get("city"),
            "contact": data.get("contact")
        }).eq("telegram_id", user_id).execute()
    else:
        supabase.table("users").insert({
            "telegram_id": user_id,
            "roles": data["roles"],
            "city": data.get("city"),
            "contact": data.get("contact")
        }).execute()

def get_user(user_id):
    res = supabase.table("users").select("*").eq("telegram_id", user_id).single().execute()
    return res.data if res.data else None

def write_log(text):
    logger.info(text)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    logger.info(f"[START] –ü–æ–ª—É—á–µ–Ω /start –æ—Ç {message.from_user.id}")
    write_log(f"[START] {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Joby ‚Äî –±–æ—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîç –•–æ—á—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É")],
                [KeyboardButton(text="‚ûï –•–æ—á—É —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(Registration.role)

@router.message(Registration.role)
async def get_role(message: Message, state: FSMContext):
    role = None
    if "–Ω–∞–π—Ç–∏" in message.text.lower():
        role = "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    elif "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å" in message.text.lower():
        role = "–∑–∞–∫–∞–∑—á–∏–∫"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.")
        return

    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        roles = user.get("roles", [])
        if role not in roles:
            roles.append(role)
            user["roles"] = roles
            save_user(user_id, user)
            write_log(f"[REG] {user_id} –¥–æ–±–∞–≤–∏–ª —Ä–æ–ª—å {role}")
            await message.answer(f"‚úÖ –†–æ–ª—å <b>{role}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.", reply_markup=menu_keyboard)
        else:
            await message.answer(f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å <b>{role}</b>.", reply_markup=menu_keyboard)
        await state.clear()
        return

    await state.update_data(roles=[role])
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(Registration.city)

@router.message(Registration.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    username = message.from_user.username
    if username:
        await state.update_data(contact=f"@{username}")
        data = await state.get_data()
        save_user(message.from_user.id, data)
        write_log(f"[REG] {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Å —Ä–æ–ª—è–º–∏ {data['roles']}")
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.", reply_markup=menu_keyboard)
        await state.clear()
    else:
        await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username):")
        await state.set_state(Registration.contact)

@router.message(Registration.contact)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()
    save_user(message.from_user.id, data)
    write_log(f"[REG] {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è —Å —Ä–æ–ª—è–º–∏ {data['roles']}")
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.", reply_markup=menu_keyboard)
    await state.clear()
