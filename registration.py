import logging
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from datetime import datetime
from supabase import create_client
import os
from dotenv import load_dotenv

# === Supabase ===
load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# === –õ–æ–≥–≥–µ—Ä ===
logger = logging.getLogger(__name__)

# === –ú–µ–Ω—é-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –ú–æ–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏")],
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É")],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")]
    ],
    resize_keyboard=True
)

router = Router()

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class Registration(StatesGroup):
    role = State()
    city = State()
    contact = State()

# === /start ===
@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    logger.info(f"[START] {message.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Joby ‚Äî –±–æ—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üîç –•–æ—á—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É")],
                [KeyboardButton(text="‚ûï –•–æ—á—É —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(Registration.role)

# === –í—ã–±–æ—Ä —Ä–æ–ª–∏ ===
@router.message(Registration.role)
async def get_role(message: Message, state: FSMContext):
    role = None
    if "–Ω–∞–π—Ç–∏" in message.text.lower():
        role = "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
    elif "—Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å" in message.text.lower():
        role = "–∑–∞–∫–∞–∑—á–∏–∫"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.")
        return

    user_id = str(message.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ
    existing = supabase.table("users").select("roles").eq("id", user_id).execute()
    if existing.data:
        roles = existing.data[0].get("roles", [])
        if role not in roles:
            roles.append(role)
            supabase.table("users").update({"roles": roles}).eq("id", user_id).execute()
            await message.answer(f"‚úÖ –†–æ–ª—å <b>{role}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.", reply_markup=menu_keyboard)
        else:
            await message.answer(f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å <b>{role}</b>.", reply_markup=menu_keyboard)
        await state.clear()
        return

    await state.update_data(roles=[role])
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    await state.set_state(Registration.city)

# === –í–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ ===
@router.message(Registration.city)
async def get_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    username = message.from_user.username
    if username:
        await state.update_data(contact=f"@{username}")
        await save_to_supabase(message.from_user.id, await state.get_data())
        await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.", reply_markup=menu_keyboard)
        await state.clear()
    else:
        await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ @username):")
        await state.set_state(Registration.contact)

# === –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ===
@router.message(Registration.contact)
async def get_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    await save_to_supabase(message.from_user.id, await state.get_data())
    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.", reply_markup=menu_keyboard)
    await state.clear()

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase ===
async def save_to_supabase(user_id, data):
    try:
        supabase.table("users").insert({
            "id": str(user_id),
            "roles": data.get("roles", []),
            "city": data.get("city"),
            "contact": data.get("contact"),
            "created_at": datetime.utcnow().isoformat()
        }).execute()
        logger.info(f"[REG] {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {data}")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase: {e}")
