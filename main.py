import asyncio
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import setup_application, SimpleRequestHandler
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from dotenv import load_dotenv

from registration import router as registration_router
from add_job import router as add_job_router
from actions import router as actions_router
from logger_middleware import GlobalLoggerMiddleware

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

formatter = logging.Formatter("üìò [%(asctime)s] [%(levelname)s] %(message)s")

file_handler = logging.FileHandler("full_debug.log", encoding="utf-8")
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –ü—Ä–∏–º–µ—Ä: https://joby-bot.onrender.com
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
IS_PROD = os.getenv("IS_PROD", "1") == "1"

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
if not WEBHOOK_HOST:
    raise ValueError("‚ùå WEBHOOK_HOST –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# === –†–æ—É—Ç–µ—Ä—ã ===
dp.include_router(registration_router)
dp.include_router(add_job_router)
dp.include_router(actions_router)

# === Middleware ===
dp.message.middleware(GlobalLoggerMiddleware())

# === –õ–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
@dp.update.outer_middleware()
async def log_incoming_updates(handler, event, data):
    logger.debug(f"üì• [Update] –¢–∏–ø: {type(event)} | –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {event}")
    return await handler(event, data)

# === –°—Ç–∞—Ä—Ç ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def on_startup(bot: Bot):
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception:
        logger.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")

    if IS_PROD and ADMIN_ID:
        try:
            await bot.send_message(chat_id=ADMIN_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ Webhook –∞–∫—Ç–∏–≤–µ–Ω!")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram")

# === –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ webhook ===
async def on_shutdown(bot: Bot):
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    try:
        await bot.delete_webhook()
        await bot.session.close()
        logger.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω, —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook")

# === AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ===
async def create_app():
    logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    setup_application(app, dp, handle_class=SimpleRequestHandler, bot=bot, path=WEBHOOK_PATH)
    return app

# === –î–ª—è Render: —ç–∫—Å–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π app ===
app = asyncio.run(create_app())

# === –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
if __name__ == "__main__":
    try:
        port = int(os.environ.get("PORT", 10000))
        logger.info(f"üåç –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        web.run_app(app, port=port)
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞")
