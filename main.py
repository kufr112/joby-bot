import asyncio
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import setup_application, SimpleRequestHandler
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from dotenv import load_dotenv

from registration import router as registration_router
from add_job import router as add_job_router
from actions import router as actions_router
from logger_middleware import GlobalLoggerMiddleware

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="üìò [%(asctime)s] [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ===
if not BOT_TOKEN:
    logger.critical("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

if not WEBHOOK_HOST:
    logger.critical("‚ùå WEBHOOK_HOST –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("‚ùå WEBHOOK_HOST –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ ===
dp.include_router(registration_router)
dp.include_router(add_job_router)
dp.include_router(actions_router)

# === Middleware ===
dp.message.middleware(GlobalLoggerMiddleware())

# === –§—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ===
async def on_startup(bot: Bot):
    logger.info("üöÄ –°—Ç–∞—Ä—Ç—É—é on_startup...")
    await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    try:
        await bot.send_message(chat_id=853076774, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ: {e}")

async def on_shutdown(bot: Bot):
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞... –£–¥–∞–ª—è—é webhook –∏ –∑–∞–∫—Ä—ã–≤–∞—é —Å–µ—Å—Å–∏—é")
    await bot.delete_webhook()
    await bot.session.close()
    logger.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω –∏ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")

# === –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
async def create_app():
    logger.info("üîß –°–æ–∑–¥–∞—é AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    setup_application(app, dp, handle_class=SimpleRequestHandler, bot=bot, path=WEBHOOK_PATH)
    logger.info("üì° Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ç–æ–≤")
    return app

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    try:
        port = int(os.environ.get("PORT", 10000))
        logger.info(f"üåê –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app = asyncio.run(create_app())
        web.run_app(app, port=port)
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
else:
    app = create_app()
