import asyncio
import logging
import os

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import setup_application, SimpleRequestHandler
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from dotenv import load_dotenv

from registration import router as registration_router
from add_job import router as add_job_router
from actions import router as actions_router
from logger_middleware import GlobalLoggerMiddleware

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å ===
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)

formatter = logging.Formatter("üìò [%(asctime)s] [%(levelname)s] %(message)s")

# –õ–æ–≥ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("full_debug.log", encoding="utf-8")
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

# –õ–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å (Render logs)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
IS_PROD = os.getenv("IS_PROD", "1") == "1"

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
if not WEBHOOK_HOST:
    raise ValueError("‚ùå WEBHOOK_HOST –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(registration_router)
dp.include_router(add_job_router)
dp.include_router(actions_router)

# === Middleware
dp.message.middleware(GlobalLoggerMiddleware())

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–ø–¥–µ–π—Ç–æ–≤
@dp.update.outer_middleware()
async def log_incoming_updates(handler, event, data):
    logger.debug(f"üì• [Update] –¢–∏–ø: {type(event)} | –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {event}")
    return await handler(event, data)

# === Webhook —Ö—É–∫–∏
async def on_startup(bot: Bot):
    logger.info("üöÄ on_startup...")
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception as e:
        logger.exception(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")

    if IS_PROD:
        try:
            await bot.send_message(chat_id=853076774, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            logger.info("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.exception("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram")

async def on_shutdown(bot: Bot):
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞... —É–¥–∞–ª—è—é webhook")
    try:
        await bot.delete_webhook()
        await bot.session.close()
        logger.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω –∏ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook")

# === AIOHTTP
async def create_app():
    logger.info("üîß –°–æ–∑–¥–∞—é AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    app = web.Application()
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    setup_application(app, dp, handle_class=SimpleRequestHandler, bot=bot, path=WEBHOOK_PATH)
    logger.info("üì° Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω")
    return app

# === –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        port = int(os.environ.get("PORT", 10000))
        logger.info(f"üåê –ó–∞–ø—É—Å–∫–∞—é –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app = asyncio.run(create_app())
        web.run_app(app, port=port)
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:")
