import asyncio
import os
import json
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from dotenv import load_dotenv

from registration import router as registration_router
from add_job import router as job_router
from keyboards import menu_keyboard
from logger_middleware import GlobalLoggerMiddleware  # ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
logger = logging.getLogger(__name__)

# -------------------- ENV ---------------------
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    exit("–û–®–ò–ë–ö–ê: BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

if not ADMIN_ID:
    logger.error("‚ùå ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    exit("–û–®–ò–ë–ö–ê: ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")

# -------------------- BOT ---------------------
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# ‚úÖ –ú–∏–¥–ª–≤–∞—Ä—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
dp.message.middleware(GlobalLoggerMiddleware())
dp.callback_query.middleware(GlobalLoggerMiddleware())

# -------------------- ROUTERS ---------------------
router = Router()
dp.include_router(router)
dp.include_router(registration_router)
dp.include_router(job_router)

# ------------------ –ú–ï–ù–Æ ------------------
@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Joby ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫.\n\n–û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é —Å–Ω–∏–∑—É üëá",
        reply_markup=menu_keyboard
    )

@router.message(Command("stats"))
async def stats_command(message: Message):
    if str(message.from_user.id) != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return

    stats = {"total": 0, "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å": 0, "–∑–∞–∫–∞–∑—á–∏–∫": 0}
    if os.path.exists("stats.json"):
        with open("stats.json", "r", encoding="utf-8") as f:
            stats = json.load(f)

    await message.answer(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>:\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total', 0)}\n"
        f"üîç –ò—â—É—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É: {stats.get('–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', 0)}\n"
        f"‚ûï –†–∞–∑–º–µ—â–∞—é—Ç –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É: {stats.get('–∑–∞–∫–∞–∑—á–∏–∫', 0)}"
    )

# ------------------ –†–ï–ê–ö–¶–ò–Ø –ù–ê –ö–ù–û–ü–ö–ò ------------------
@router.message(F.text.in_({
    "üì¢ –ù–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É",
    "üßæ –ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
    "üë§ –ü—Ä–æ—Ñ–∏–ª—å / –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    "üìå –ü–æ–¥–ø–∏—Å–∫–∏",
    "üí¨ –ü–æ–º–æ—â—å / FAQ"
}))
async def log_buttons(message: Message):
    responses = {
        "üì¢ –ù–∞–π—Ç–∏ –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É": "üîç –°–µ–π—á–∞—Å –ø–æ–¥—Ä–∞–±–æ—Ç–æ–∫ –Ω–µ—Ç, –Ω–æ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!",
        "üßæ –ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": "üìÑ –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤—Å–µ —Ç–≤–æ–∏ —Ä–∞–∑–º–µ—â—ë–Ω–Ω—ã–µ –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∏.",
        "üë§ –ü—Ä–æ—Ñ–∏–ª—å / –ù–∞—Å—Ç—Ä–æ–π–∫–∏": "‚öôÔ∏è –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ç–≤–æ–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–∞–Ω–Ω—ã–µ.",
        "üìå –ü–æ–¥–ø–∏—Å–∫–∏": "üîî –ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
        "üí¨ –ü–æ–º–æ—â—å / FAQ": "‚ùì –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–º–æ—â—å."
    }

    await message.answer(responses.get(message.text, "ü§î –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞."))

# -------------------- MAIN --------------------
async def main():
    logger.info("üöÄ –°—Ç–∞—Ä—Ç polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    logger.info("‚ñ∂ –ó–∞–ø—É—Å–∫ main.py")
    asyncio.run(main())
