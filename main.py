import logging
import os
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.client.default import DefaultBotProperties
from aiohttp import web
from dotenv import load_dotenv

from registration import router as registration_router
from add_job import router as add_job_router
from actions import router as actions_router
from handlers import router as handlers_router  # üëà –•–µ–Ω–¥–ª–µ—Ä —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)
from logger_middleware import GlobalLoggerMiddleware
from keyboards import menu_keyboard  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–µ –Ω–æ–≤–æ–µ –º–µ–Ω—é

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("üìò [%(asctime)s] [%(levelname)s] %(message)s")

file_handler = logging.FileHandler("full_debug.log", encoding="utf-8")
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
IS_PROD = os.getenv("IS_PROD", "1") == "1"

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")
if not WEBHOOK_HOST:
    raise ValueError("‚ùå WEBHOOK_HOST –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏ middleware ===
dp.include_router(handlers_router)
dp.include_router(registration_router)
dp.include_router(add_job_router)
dp.include_router(actions_router)
dp.message.middleware(GlobalLoggerMiddleware())

# ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ /start
@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Joby Bot.\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é:",
        reply_markup=menu_keyboard
    )

# === –õ–æ–≥ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ===
@dp.update.outer_middleware()
async def log_incoming_updates(handler, event, data):
    logger.debug(f"üì• [Update] –¢–∏–ø: {type(event)} | –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {event}")
    return await handler(event, data)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ===
async def on_startup(app: web.Application):
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await bot.set_webhook(WEBHOOK_URL)
        logger.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    except Exception:
        logger.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")

    if IS_PROD and ADMIN_ID:
        try:
            await bot.send_message(chat_id=ADMIN_ID, text="‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ Webhook –∞–∫—Ç–∏–≤–µ–Ω!")
        except Exception:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É")

async def on_shutdown(app: web.Application):
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    try:
        await bot.delete_webhook()
        await bot.session.close()
        logger.info("‚úÖ Webhook —É–¥–∞–ª—ë–Ω –∏ —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
    except Exception:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")

# === –°–æ–∑–¥–∞–Ω–∏–µ aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
async def create_app():
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    return app

# === –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Gunicorn (Render) ===
app = asyncio.run(create_app())

# === –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
if __name__ == "__main__":
    web.run_app(app)
